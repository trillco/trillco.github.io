import * as React from "react"
import { Frame, addPropertyControls, ControlType, RenderTarget } from "framer"

import { Fragment, useRef, useEffect, useState } from "react"

const ThemeSwitch = ({ preserveRasters = true, storeKey = "ThemeSwitch" }) => {
    // const cssString = `
    //     :not(div[data-reactroot]) main > div > div > div > div > div >  div > div { filter: invert(100%); background: #fefefe; }
    //     main > div > div * { background-color: inherit }
    //   `
    const cssString = `
	    html { filter: invert(100%); background: none; }
	    /** { background-color: inherit }*/
	  `
    // const rasterCss =
    // 	':not(div[data-reactroot]) img:not([src*=".svg"]), video, [style*="url("] { filter: invert(100%) }'
    const rasterCss =
        'img:not([src*=".svg"]), video, [style*="url("] { filter: invert(100%) }'

    const isDeclarationSupported = (property, value) => {
        const prop = property + ":",
            el = document.createElement("test"),
            mStyle = el.style
        el.style.cssText = prop + value
        return mStyle[property]
    }

    const supported = useRef(!!isDeclarationSupported("filter", "invert(100%)"))

    const [css, setCss] = useState(cssString)
    const [active, setActive] = useState(
        localStorage.getItem(storeKey) === "true" ||
            (!localStorage.getItem(storeKey) &&
                matchMedia("(prefers-color-scheme: dark)").matches)
    )

    useEffect(() => {
        if (preserveRasters) {
            setCss(`${cssString} ${rasterCss}`)
        }
        return () => {
            setCss(cssString)
        }
    }, [preserveRasters])

    useEffect(() => {
        localStorage.setItem(storeKey, active.toString())
    }, [active, storeKey])

    const toggle = () => {
        setActive(a => !a)
    }

    return (
        supported.current && (
            <Fragment>
                <Frame
                    center
                    aria-pressed={active}
                    onClick={toggle}
                    style={{
                        borderWidth: 0,
                        background: "transparent",
                        color: "transparent",
                        height: 44,
                        width: 44,
                        padding: 6,
                        margin: 0,
                    }}
                >
                    <Frame
                        center
                        style={{
                            width: 28,
                            height: 28,
                            overflow: "hidden",
                            backgroundColor: "#ffffff",
                            borderRadius: 50,
                            boxShadow:
                                "0px 0px 0px 3px #ffffff, 0px 0px 0px 6px rgb(0, 0, 0)",
                        }}
                    >
                        <Frame
                            style={{
                                width: 14,
                                height: 28,
                                overflow: "visible",
                                backgroundColor: "#000000",
                            }}
                        />
                    </Frame>
                </Frame>
                <style
                    media={
                        active &&
                        (RenderTarget.current() === RenderTarget.preview ||
                            RenderTarget.current() === RenderTarget.export)
                            ? "screen"
                            : "none"
                    }
                >
                    {active ? css.trim() : css}
                </style>
            </Fragment>
        )
    )
}

// Open Preview: Command + P
// Learn more: https://framer.com/api

export function InstantDarkMode(props) {
    const { preserve, ...rest } = props

    return (
        <Frame width="100%" height="100%" background="transparent">
            <ThemeSwitch preserveRasters={preserve} />
        </Frame>
    )
}

InstantDarkMode.defaultProps = {
    height: 44,
    width: 44,
    preserve: true,
}

// Learn more: https://framer.com/api/property-controls/
addPropertyControls(InstantDarkMode, {
    preserve: {
        title: "Rasters",
        type: ControlType.Boolean,
        defaultValue: true,
        disabledTitle: "Inverse",
        enabledTitle: "Preserve",
    },
})
